// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package bqconn_test

import (
	"context"

	bqconn "github.com/tmc/mkbigqueryconn/bqconn"
	connectionpb "google.golang.org/genproto/googleapis/cloud/bigquery/connection/v1beta1"
	iampb "google.golang.org/genproto/googleapis/iam/v1"
)

func ExampleNewConnectionClient() {
	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleConnectionClient_CreateConnection() {
	// import connectionpb "google.golang.org/genproto/googleapis/cloud/bigquery/connection/v1beta1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.CreateConnectionRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateConnection(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_GetConnection() {
	// import connectionpb "google.golang.org/genproto/googleapis/cloud/bigquery/connection/v1beta1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.GetConnectionRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetConnection(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_ListConnections() {
	// import connectionpb "google.golang.org/genproto/googleapis/cloud/bigquery/connection/v1beta1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.ListConnectionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListConnections(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_UpdateConnection() {
	// import connectionpb "google.golang.org/genproto/googleapis/cloud/bigquery/connection/v1beta1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.UpdateConnectionRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateConnection(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_UpdateConnectionCredential() {
	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.UpdateConnectionCredentialRequest{
		// TODO: Fill request struct fields.
	}
	err = c.UpdateConnectionCredential(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleConnectionClient_DeleteConnection() {
	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &connectionpb.DeleteConnectionRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteConnection(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleConnectionClient_GetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_SetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleConnectionClient_TestIamPermissions() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := bqconn.NewConnectionClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.TestIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
